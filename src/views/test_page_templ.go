// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.598
package views

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"github.com/jackc/pgx/v5/pgxpool"
	"log"
	"math/rand"
	"net/http"
)

type wordPair struct {
	Word    string `json:"word"`
	NonWord string `json:"nonWord"`
	Id      int    `json:"id"`
	Choice  int    `json:"choice"`
}

func TestPage(w http.ResponseWriter, r *http.Request, db *pgxpool.Pool) {

	// getting word list
	base := []wordPair{
		{
			Word:    "blade",
			NonWord: "charrel",
			Id:      -1,
			Choice:  rand.Int()%2 + 1,
		},
		{
			Word:    "future",
			NonWord: "heru",
			Id:      -1,
			Choice:  rand.Int()%2 + 1,
		},
		{
			Word:    "invitation",
			NonWord: "masler",
			Id:      -1,
			Choice:  rand.Int()%2 + 1,
		},
		{
			Word:    "ranch",
			NonWord: "plapforb",
			Id:      -1,
			Choice:  rand.Int()%2 + 1,
		},
		{
			Word:    "scale",
			NonWord: "strofe",
			Id:      -1,
			Choice:  rand.Int()%2 + 1,
		},
		{
			Word:    "verse",
			NonWord: "zobe",
			Id:      -1,
			Choice:  rand.Int()%2 + 1,
		},
	}
	value, err := db.Query(context.Background(), `SELECT word, nonword, id, choice from (
(SELECT * FROM (SELECT *, NTILE(2) OVER ( ORDER BY RANDOM() ) as choice FROM
	(
    SELECT * FROM "wordPairs" as wp WHERE aoa = 'early' and freq = 'high' ORDER BY RANDOM() LIMIT 16) as wp
 )as wp) union
 (SELECT * FROM (SELECT *, NTILE(2) OVER ( ORDER BY RANDOM() ) as choice FROM
	(
    SELECT * FROM "wordPairs" as wp WHERE aoa = 'late' and freq = 'high' ORDER BY RANDOM() LIMIT 16) as wp
 )as wp) union
 (SELECT * FROM (SELECT *, NTILE(2) OVER ( ORDER BY RANDOM() ) as choice FROM
	(
    SELECT * FROM "wordPairs" as wp WHERE aoa = 'early' and freq = 'low' ORDER BY RANDOM() LIMIT 16) as wp
 )as wp) union
 (SELECT * FROM (SELECT *, NTILE(2) OVER ( ORDER BY RANDOM() ) as choice FROM
	(
    SELECT * FROM "wordPairs" as wp WHERE aoa = 'late' and freq = 'low' ORDER BY RANDOM() LIMIT 16) as wp
 )as wp)
) as final ORDER BY RANDOM()`)
	if err != nil {
		log.Print(err.Error())
		return
	}
	defer value.Close()
	for value.Next() {
		var newWordPair wordPair
		value.Scan(&newWordPair.Word, &newWordPair.NonWord, &newWordPair.Id, &newWordPair.Choice)
		base = append(base, newWordPair)
	}

	testerComponent(base, (rand.Int()%2 == 1)).Render(context.Background(), w)
}

func runner(pairs []wordPair, flip bool) templ.ComponentScript {
	return templ.ComponentScript{
		Name: `__templ_runner_1b47`,
		Function: `function __templ_runner_1b47(pairs, flip){let ct = new Date()
      let index = -1
      const array = pairs
      function keyDown(event) {
        if(!(event.key == "f" || event.key == "j")) {
          return
        }
        if(index == -1) {
          $("#testerPane").html(` + "`" + `
            <div class="flex justify-center items-center w-full flex-col">
             <span id="word1" class="bg-blue-600 rounded-lg text-white m-5 p-2 font-bold shadow-lg text-center w-40 py-5"></span>
             <div class="flex justify-center mt-12">
               <span class="bg-blue-800 rounded-lg text-white p-2 shadow-lg text-center mx-5">${flip ? "word" : "non word"}</span>
               <span class="bg-blue-800 rounded-lg text-white p-2 shadow-lg text-center mx-5">${flip ? "non word" : "word"}</span>
             </div>
           </div>
          ` + "`" + `)
          iterate()
          return
        }
        if(array[index].id === -1) {
          iterate()
          return
        }

        let correct = false
        if((event.key == (flip ? 'f' : 'j')) == (array[index].word == $("#word1").text())) {
          correct = true
        }
        fetch("/post", {
          method: "POST",
          body: JSON.stringify({
            id: array[index].id,
            correct: correct,
            time: (new Date())-ct,
            word: array[index].choice == 1
            })
          })
        iterate()

        
      }
      function iterate() {
        index++
        if(index < array.length) {
          if(array[index].choice == 1) {
            $("#word1").text(array[index].word)
          }
          else {

            $("#word1").text(array[index].nonWord)
          }

          ct = new Date()
        } else {
          $("#testerPane").html(` + "`" + `<span class="text-center font-bold text-2xl w-full">Thank You For Completing The Test</span>` + "`" + `)
        }
      }
      window.addEventListener("keydown", keyDown)

}`,
		Call:       templ.SafeScript(`__templ_runner_1b47`, pairs, flip),
		CallInline: templ.SafeScriptInline(`__templ_runner_1b47`, pairs, flip),
	}
}

func decide(flip bool, a string, b string) string {
	if flip {
		return a
	}
	return b
}

func testerComponent(pairs []wordPair, flip bool) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templ.WriteWatchModeString(templ_7745c5c3_Buffer, 1)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(decide(flip, "f", "j"))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/test_page.templ`, Line: 173, Col: 67}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ.WriteWatchModeString(templ_7745c5c3_Buffer, 2)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var3 string
		templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(decide(flip, "j", "f"))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/test_page.templ`, Line: 173, Col: 141}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ.WriteWatchModeString(templ_7745c5c3_Buffer, 3)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = runner(
			pairs,
			flip,
		).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ.WriteWatchModeString(templ_7745c5c3_Buffer, 4)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}
