// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.646
package views

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"eelsAAA/graphs"
	"fmt"
	"github.com/jackc/pgx/v5/pgxpool"
	"net/http"
)

type UserData struct {
	Users         int
	InactiveUsers int
	CompleteUsers int
	TestCount     int
}

func userData(db *pgxpool.Pool) (*UserData, error) {
	var totalUsers int
	var inactiveUsers int
	err := db.QueryRow(context.Background(), "SELECT count(*) from users").Scan(&totalUsers)
	if err != nil {
		return nil, err
	}
	err = db.QueryRow(context.Background(), "SELECT count(*) from users as u WHERE NOT EXISTS (select * from results as r where r.user = u.id ) ").Scan(&inactiveUsers)
	if err != nil {
		return nil, err
	}
	var complete int
	err = db.QueryRow(context.Background(), "select count(*) from (select count(*) from results as r group by r.user) where count >= 64").Scan(&complete)
	if err != nil {
		return nil, err
	}

	var testCount int
	err = db.QueryRow(context.Background(), "select count(*) from results").Scan(&testCount)
	if err != nil {
		return nil, err
	}

	return &UserData{
		Users:         totalUsers,
		InactiveUsers: inactiveUsers,
		CompleteUsers: complete,
		TestCount:     testCount,
	}, nil
}

func Admin(w http.ResponseWriter, db *pgxpool.Pool) {
	d, err := userData(db)
	if err != nil {
		fmt.Println("data error: " + err.Error())
		w.WriteHeader(http.StatusInternalServerError)
		return
	}

	adminView(d, db).Render(context.Background(), w)
}

func adminView(d *UserData, db *pgxpool.Pool) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<html><head><title>eels AAA data</title><script src=\"https://cdn.jsdelivr.net/npm/d3@7\"></script><script src=\"https://cdn.tailwindcss.com\"></script><script src=\"https://code.jquery.com/jquery-3.7.1.slim.min.js\" integrity=\"sha256-kmHvs0B+OpCW5GVHUNjv9rOmY0IvSIRcf7zGUDTDQM8=\" crossorigin=\"anonymous\"></script></head><body class=\"bg-gray-100\"><div class=\"grid grid-cols-3 w-full p-3 gap-4 w-full\"><div class=\"grid grid-cols-subgrid col-span-2\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = graphs.InactiveUsersPie(d.Users, d.InactiveUsers).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = graphs.NetTests(d.TestCount, d.Users, d.InactiveUsers, d.CompleteUsers).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = graphs.BifurcatedFrequencyHistogram(db).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}
